Data file
	1. contains the situation's text data in raw form
	2. series of lists of phrases or complete thoughs (sentences or phrases connected by conjunctions)
		a. each base phrase (idea) will have list of phrases saying the same thing but with different
			moods. the mood will reflect what the characters relationship status
		b. all pronouns, proper nouns, refs to time, and refs to location will be convered to a key word
			i. each keyword will contain a list of possible replacement words
			ii. each replacement word will be assigned to the phrase based on some criteria.  Things like
				gender, current location, current time, characters speaking, NPC stats
		c. Each replacement word will have some meta data used as a condition for when the word is to be used.
			i. possible structure "pronoun":["he" : ["gender":"male","subject": "true","pov":"third"], 
											 "she" : ["gender":"female","subject":"true","pov","third"],
											 "him" : ["gender": "male","subject": "false", "pov","third"],]
			ii. This will require some mechanism to parse the condition
			iii. each condition will have to be unique
				1. may lead to massive rule lists for each word
				2. probably better to generate more keywords then larger rule sets
				3. "pron1" :["he":"male","she":"female"], "pron2":["him":"male","her":"female"]
		d. Have constant word lists that will be true for every data file module
			i. create a global data file module
			ii. contains keyword lists and conditions for pronouns, constant game locations, time refs, and other constant finite elements

Conversation tones based on stats: both speaker and responder
  Type          |   required high       |      optional/mid      |      required lower
  ------------------------------------------------------------------------------------------
  -strangers    |    -none              |       -none            |       -all
  -neutral      |    -*                 |       -*               |       -*
  -friends      |    -friendship        |       -prof/respect    |       -all others
  -Lovers       |    -Romance           |       -all positive    |       -all negative       
  -Professional |    -prof/respect      |       -friends/rivalry |       -disgust/hatred
  -crush        |    -admiration        |       -all pos         |       -all neg
  -annoying     |    -disgust           |       -all neg         |       -Rom,Admiration,Friend
  -enemy        |    -hatred            |       -all neg         |       -all pos
  -rival        |    -rivalry           |       -all             |       -none
  --------------------------------------------------------------------------------------------
  -Neutral happens when none of the others are true.
  -other tones may use the neutral category
  --------------------------------------------------------------------------------------------

Hub application files:
	1. need to take in information from the game
	2. need to devise a method to combine modules correctly to build complex dialogue
		a. Situation Modules, Dialogue Modules or both
			i. situation modules would involve an action like asking someone out
				1. make larger changes to characters stats
				2. could change relationship status
			ii. dialogue Modules would involve no direct action. Something like discussing a plan
				1. smaller changes to character stats
			iii. Dialogue Modules can lead to Situational Models and vise versa
				1. Small talk can lead to asking someone out or a fist fight
			iv. Ex: Dialogue Module --> small talk --> main topic (unfair work load) --> rabit hole (common interests) --> main topic --> fair well
			v. Ex: Situational Module --> NPCa asks out NPCb and NPCb says no
			vi. Ex: Dialog-Sit-Dialog --> small talk (flirting) --> player asks out NPC  and NPC says yes --> set date plans --> fair well
		b. generate combinations of Modules similar to ensemble's validation rules
			i. Module leads to other modules if the conditions are met (stat based)
